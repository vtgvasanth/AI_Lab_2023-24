# Ex.No: 10 Learning – U# Ex.No: 13 Learning – Use Supervised Learning  

### DATE:                                                                            
### REGISTER NUMBER : 212222220024

### AIM: 
To write a program to train the classifier for a Medicine Recommendation System using Supervised Learning (SVM algorithm).

###  Algorithm:
1.Start the program.

2.Import the required libraries (pandas, sklearn, etc.).

3.Load the dataset containing symptoms and diseases.

4.Preprocess the data (remove nulls, encode values).

5.Split the data into training and testing sets.

6.Train the Support Vector Machine (SVM) classifier using the training data.

7.Predict the disease for given input symptoms using the trained model.

8.Recommend suitable medicines based on the predicted disease.

9.Display the prediction and medicine suggestions.

10.End the program.

### Program:
```
from flask import Flask, request, render_template
import numpy as np
import pandas as pd
import pickle
app = Flask(__name__)
# Load trained SVM model and required datasets
model = pickle.load(open('model/svc.pkl', 'rb'))
description = pd.read_csv("datasets/description.csv")
precautions = pd.read_csv("datasets/precautions_df.csv")
medications = pd.read_csv('datasets/medications.csv')
diets = pd.read_csv("datasets/diets.csv")
workout = pd.read_csv("datasets/workout_df.csv")
# Mapping of symptoms to indexes and disease labels
symptoms_dict = {'itching': 0, 'skin_rash': 1, 'nodal_skin_eruptions': 2, 'continuous_sneezing': 3, ...}
diseases_list = {15: 'Fungal infection', 4: 'Allergy', 16: 'GERD', ...}
# Predict disease based on user symptoms
def predict_disease(symptoms):
    input_vector = np.zeros(len(symptoms_dict))
    for symptom in symptoms:
        if symptom in symptoms_dict:
            input_vector[symptoms_dict[symptom]] = 1
    return diseases_list[model.predict([input_vector])[0]]
# Fetch additional details for predicted disease
def get_info(disease):
    desc = description[description['Disease'] == disease]['Description'].values[0]
    prec = precautions[precautions['Disease'] == disease].iloc[0, 1:].tolist()
    meds = medications[medications['Disease'] == disease]['Medication'].tolist()
    diet = diets[diets['Disease'] == disease]['Diet'].tolist()
    work = workout[workout['disease'] == disease]['workout'].tolist()
    return desc, prec, meds, diet, work
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        user_input = request.form.get('symptoms')
        symptoms = [s.strip() for s in user_input.split(',')]
        disease = predict_disease(symptoms)
        desc, prec, meds, diet, work = get_info(disease)
        return render_template('index.html', predicted_disease=disease, dis_des=desc, my_precautions=prec, medications=meds, my_diet=diet, workout=work)
    return render_template('index.html')
if __name__ == '__main__':
    app.run(debug=True)
```
### OUTPUT:
![Screenshot 2025-05-13 103209](https://github.com/user-attachments/assets/49b13ca9-2000-4f25-9f86-3f5f42b1186e)
![Screenshot 2025-05-13 103320](https://github.com/user-attachments/assets/7b039801-d06e-4431-a8d5-a122bc0ff7c9)

### Result:
Thus the system was trained successfully and the prediction was carried out.se Supervised Learning  
### DATE:                                                                            
### REGISTER NUMBER : 
### AIM: 
To write a program to train the classifier for -----------------.
###  Algorithm:

### Program:


### Output:


### Result:
Thus the system was trained successfully and the prediction was carried out.
